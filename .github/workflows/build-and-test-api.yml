name: CI/CD for Weather App

on:
  push:
    branches: [ "main", "cicd" ] 

jobs:
  # 1단계: 빌드 및 푸시 (CI)
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./mlops_team/app/Dockerfile.app
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}

  # 2단계: 배포 (CD)
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- 정확한 버전의 이미지를 pull 받도록 변경 ---
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}
            
            # 기존 컨테이너 중지 및 삭제
            docker stop weather-app-container || true
            docker rm weather-app-container || true
            
            # --- 정확한 버전의 이미지로 컨테이너 실행 ---
            docker run -d \
              -p 8000:8000 \
              -p 8501:8501 \
              --name weather-app-container \
              --env-file /home/ubuntu/weather-app/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}

            # --- 불필요한 옛날 이미지들 자동 삭제 ---
            docker image prune -af

      # 추가함. 3단계: 스모크 테스트 ---
      - name: Smoke Test
        # 배포 작업이 끝나고 컨테이너가 뜰 시간을 줌 (30초)
        run: |
          sleep 30
          echo "--- Running Smoke Tests ---"
          echo "Testing FastAPI endpoint (port 8000)..."
          curl -f http://${{ secrets.EC2_HOST }}:8000/
          echo "Testing Streamlit endpoint (port 8501)..."
          curl -f http://${{ secrets.EC2_HOST }}:8501