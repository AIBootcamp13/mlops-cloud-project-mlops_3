# # 버전 1: GitHub Actions를 사용하여 CI/CD 파이프라인 구축
# name: CI/CD for Weather App

# on:
#   push:
#     branches: [ "main", "cicd" ] 

# jobs:
#   # 1단계: 빌드 및 푸시 (CI)
#   build_and_push:
#     runs-on: ubuntu-latest
    
#     steps:
#       # 코드 체크아웃
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Docker Hub 로그인
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }} 
      
#       # Docker 이미지 빌드 및 Docker Hub에 푸시
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: . # 프로젝트 루트에서 빌드
#           file: ./mlops_team/app/Dockerfile.app # Dockerfile 경로 지정
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
#             ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}

#   # 2단계: 배포 (CD)
#   deploy:
#     # 'build_and_push' 작업이 성공해야만 이 작업이 실행됨
#     needs: build_and_push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Deploy to EC2
#         # SSH로 원격 접속해서 명령어를 실행해주는 아주 편리한 액션
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             # --- 아래 스크립트가 EC2 서버 안에서 실행됨 ---
            
#             # Docker Hub에서 최신 이미지 받아오기
#             docker pull ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            
#             # 이전에 실행 중이던 컨테이너가 있다면 중지하고 삭제
#             docker stop weather-app-container || true
#             docker rm weather-app-container || true
            
#             # 최신 이미지로 새 컨테이너 실행
#             # (주의: EC2에 미리 준비해둔 .env 파일 경로를 정확히 적어야 함)
#             docker run -d \
#               -p 8000:8000 \
#               -p 8501:8501 \
#               --name weather-app-container \
#               --env-file /home/ubuntu/weather-app/.env \
#               ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest

#       # 배포 성공 시 슬랙 알림
#       # - name: Notify Slack on successful deployment
#       #   if: success()
#       #   run: |
#       #     curl -X POST -H 'Content-type: application/json' \
#       #       --data '{"text":" EC2 배포 성공! 지금 바로 서비스를 확인해보세요!\n- Streamlit: http://${{ secrets.EC2_HOST }}:8501\n- API Docs: http://${{ secrets.EC2_HOST }}:8000/docs"}' \
#       #       ${{ secrets.SLACK_WEBHOOK_URL }}


name: CI/CD for Weather App

on:
  push:
    branches: [ "main", "cicd" ] # main 브랜치에 푸시될 때만 실행

jobs:
  # 1단계: 빌드 및 푸시 (CI)
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./mlops_team/app/Dockerfile.app
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}

  # 2단계: 배포 (CD)
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- [수정] 정확한 버전의 이미지를 pull 받도록 변경 ---
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}
            
            # 기존 컨테이너 중지 및 삭제
            docker stop weather-app-container || true
            docker rm weather-app-container || true
            
            # --- [수정] 정확한 버전의 이미지로 컨테이너 실행 ---
            docker run -d \
              -p 8000:8000 \
              -p 8501:8501 \
              --name weather-app-container \
              --env-file /home/ubuntu/weather-app/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}

            # --- [추가] 불필요한 옛날 이미지들 자동 삭제 ---
            docker image prune -af

      # --- [추가] 3단계: 스모크 테스트 ---
      - name: Smoke Test
        # 배포 작업이 끝나고 컨테이너가 뜰 시간을 줌 (30초)
        run: |
          sleep 30
          echo "--- Running Smoke Tests ---"
          echo "Testing FastAPI endpoint (port 8000)..."
          curl -f http://${{ secrets.EC2_HOST }}:8000/
          echo "Testing Streamlit endpoint (port 8501)..."
          curl -f http://${{ secrets.EC2_HOST }}:8501